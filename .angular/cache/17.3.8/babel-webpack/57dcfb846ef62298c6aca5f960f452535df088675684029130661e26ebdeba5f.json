{"ast":null,"code":"import { FormBuilder, Validators } from '@angular/forms';\nimport { AuthenticationService } from '../../../landing/services/authentication.service';\nimport { AngularFireStorage } from '@angular/fire/compat/storage';\nimport { AdmissionService } from '../../services/admission.service';\nimport { finalize } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../landing/services/authentication.service\";\nimport * as i3 from \"../../services/admission.service\";\nimport * as i4 from \"@angular/fire/compat/storage\";\nexport let AdmissionComponent = /*#__PURE__*/(() => {\n  class AdmissionComponent {\n    constructor(fb, authService, admissionService, storage) {\n      this.fb = fb;\n      this.authService = authService;\n      this.admissionService = admissionService;\n      this.storage = storage;\n      this.user = null;\n      this.degreeLevels = ['BAC+1', 'BAC+2', 'BAC+3', 'BAC+4', 'BAC+5'];\n      this.showAdditionalFields = false;\n      this.admissionForm = this.fb.group({\n        degreeLevel: ['', Validators.required],\n        baccalaureat: this.fb.group({\n          file: [null, Validators.required]\n        }),\n        yearDocuments: this.fb.array([])\n      });\n      this.admissionForm.get('degreeLevel')?.valueChanges.subscribe(value => {\n        this.onDegreeLevelChange(value);\n      });\n    }\n    ngOnInit() {\n      this.authService.authenticatedUser$.subscribe(user => {\n        this.user = user;\n      });\n    }\n    get yearDocuments() {\n      return this.admissionForm.get('yearDocuments');\n    }\n    onDegreeLevelChange(degreeLevel) {\n      this.showAdditionalFields = !!degreeLevel;\n      this.clearYearDocuments();\n      const numYears = parseInt(degreeLevel.replace('BAC+', ''), 10);\n      for (let i = 1; i <= numYears; i++) {\n        this.addYear(i);\n      }\n    }\n    clearYearDocuments() {\n      while (this.yearDocuments.length) {\n        this.yearDocuments.removeAt(0);\n      }\n    }\n    addYear(year) {\n      const yearGroup = this.fb.group({\n        year: `Année ${year}`,\n        documents: this.fb.array([])\n      });\n      this.yearDocuments.push(yearGroup);\n    }\n    addDocument(yearGroup) {\n      const documents = yearGroup.get('documents');\n      documents.push(this.fb.group({\n        description: ['', Validators.required],\n        file: [null, Validators.required]\n      }));\n    }\n    removeDocument(yearGroup, index) {\n      const documents = yearGroup.get('documents');\n      documents.removeAt(index);\n    }\n    onFileChange(event, formGroup) {\n      const input = event.target;\n      const file = input.files?.[0];\n      if (!file || !this.user) {\n        return;\n      }\n      const filePath = `admissions/${this.user.uid}/${file.name}`;\n      const fileRef = this.storage.ref(filePath);\n      const task = this.storage.upload(filePath, file);\n      task.snapshotChanges().pipe(finalize(() => {\n        fileRef.getDownloadURL().subscribe(url => {\n          formGroup.get('file')?.setValue(url);\n        });\n      })).subscribe();\n    }\n    onSubmit() {\n      if (this.admissionForm.invalid || !this.user) {\n        return;\n      }\n      const admission = {\n        userId: this.user.uid,\n        degreeLevel: this.admissionForm.value.degreeLevel,\n        documents: this.admissionForm.value.yearDocuments.reduce((acc, yearGroup) => {\n          const year = yearGroup.year;\n          const docs = yearGroup.documents.map(doc => ({\n            description: doc.description,\n            fileUrl: doc.file\n          }));\n          acc[year] = docs;\n          return acc;\n        }, {})\n      };\n      this.admissionService.addAdmission(admission).then(() => {\n        // Handle successful submission\n      }).catch(error => {\n        // Handle error\n      });\n    }\n    static #_ = this.ɵfac = function AdmissionComponent_Factory(t) {\n      return new (t || AdmissionComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthenticationService), i0.ɵɵdirectiveInject(i3.AdmissionService), i0.ɵɵdirectiveInject(i4.AngularFireStorage));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AdmissionComponent,\n      selectors: [[\"app-admission\"]],\n      decls: 0,\n      vars: 0,\n      template: function AdmissionComponent_Template(rf, ctx) {},\n      styles: [\"mat-form-field[_ngcontent-%COMP%]{width:100%;margin-bottom:15px}input[type=file][_ngcontent-%COMP%]{margin-bottom:15px}\"]\n    });\n  }\n  return AdmissionComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}