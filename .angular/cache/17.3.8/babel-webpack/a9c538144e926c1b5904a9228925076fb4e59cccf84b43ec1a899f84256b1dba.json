{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { finalize } from 'rxjs';\nimport { AuthenticationService } from '../../../landing/services/authentication.service';\nimport { AdmissionService } from '../../services/admission.service';\nimport { AngularFireStorage } from '@angular/fire/compat/storage';\nlet AdmissionComponent = class AdmissionComponent {\n  constructor(fb, authService, admissionService, storage) {\n    this.fb = fb;\n    this.authService = authService;\n    this.admissionService = admissionService;\n    this.storage = storage;\n    this.user = null;\n    this.degreeLevels = ['BAC+1', 'BAC+2', 'BAC+3', 'BAC+4', 'BAC+5'];\n    this.showAdditionalFields = false;\n    this.admissionForm = this.fb.group({\n      degreeLevel: ['', Validators.required],\n      baccalaureat: this.fb.group({\n        file: [null, Validators.required]\n      }),\n      yearDocuments: this.fb.array([])\n    });\n    this.admissionForm.get('degreeLevel')?.valueChanges.subscribe(value => {\n      this.onDegreeLevelChange(value);\n    });\n  }\n  ngOnInit() {\n    this.authService.authenticatedUser$.subscribe(user => {\n      this.user = user;\n    });\n  }\n  get yearDocuments() {\n    return this.admissionForm.get('yearDocuments');\n  }\n  onDegreeLevelChange(degreeLevel) {\n    this.showAdditionalFields = !!degreeLevel;\n    this.clearYearDocuments();\n    const numYears = parseInt(degreeLevel.replace('BAC+', ''), 10);\n    for (let i = 1; i <= numYears; i++) {\n      this.addYear(i);\n    }\n  }\n  clearYearDocuments() {\n    while (this.yearDocuments.length) {\n      this.yearDocuments.removeAt(0);\n    }\n  }\n  addYear(year) {\n    const yearGroup = this.fb.group({\n      year: `AnnÃ©e ${year}`,\n      documents: this.fb.array([])\n    });\n    this.yearDocuments.push(yearGroup);\n  }\n  addDocument(yearGroup) {\n    const documents = yearGroup.get('documents');\n    documents.push(this.fb.group({\n      description: ['', Validators.required],\n      file: [null, Validators.required]\n    }));\n  }\n  removeDocument(yearGroup, index) {\n    const documents = yearGroup.get('documents');\n    documents.removeAt(index);\n  }\n  onFileChange(event, formGroup) {\n    const input = event.target;\n    const file = input.files?.[0];\n    if (!file || !this.user) {\n      // handle error: no file or user not authenticated\n      return;\n    }\n    const filePath = `admissions/${this.user.uid}/${file.name}`;\n    const fileRef = this.storage.ref(filePath);\n    const task = this.storage.upload(filePath, file);\n    task.snapshotChanges().pipe(finalize(() => {\n      fileRef.getDownloadURL().subscribe(url => {\n        formGroup.get('file')?.setValue(url);\n      });\n    })).subscribe();\n  }\n  onSubmit() {\n    if (this.admissionForm.invalid || !this.user) {\n      return;\n    }\n    const admission = {\n      userId: this.user.uid,\n      degreeLevel: this.admissionForm.value.degreeLevel,\n      documents: this.admissionForm.value.yearDocuments.reduce((acc, yearGroup) => {\n        const year = yearGroup.year;\n        const docs = yearGroup.documents.map(doc => ({\n          description: doc.description,\n          fileUrl: doc.file\n        }));\n        acc[year] = docs;\n        return acc;\n      }, {})\n    };\n    this.admissionService.addAdmission(admission).then(() => {\n      // Handle successful submission\n    }).catch(error => {\n      // Handle error\n    });\n  }\n};\nAdmissionComponent = __decorate([Component({\n  selector: 'app-admission',\n  templateUrl: './admission.component.html',\n  styleUrl: './admission.component.scss'\n}), __metadata(\"design:paramtypes\", [FormBuilder, AuthenticationService, AdmissionService, AngularFireStorage])], AdmissionComponent);\nexport { AdmissionComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}