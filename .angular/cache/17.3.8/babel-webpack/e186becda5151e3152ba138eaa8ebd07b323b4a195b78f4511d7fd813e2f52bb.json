{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { AuthenticationService } from '../../../landing/services/authentication.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { AdmissionService } from '../../services/admission.service';\nlet AdmissionComponent = class AdmissionComponent {\n  constructor(fb, admissionService, authService, snackBar) {\n    this.fb = fb;\n    this.admissionService = admissionService;\n    this.authService = authService;\n    this.snackBar = snackBar;\n    this.user = null;\n    this.degreeLevels = ['BAC+1', 'BAC+2', 'BAC+3', 'BAC+4', 'BAC+5'];\n    this.showAdditionalFields = false;\n    this.admissionForm = this.fb.group({\n      degreeLevel: ['', Validators.required],\n      baccalaureat: [null],\n      yearDocuments: this.fb.array([])\n    });\n  }\n  ngOnInit() {\n    this.authService.getCurrentUser().then(user => {\n      this.user = user;\n    });\n    this.admissionForm.get('degreeLevel')?.valueChanges.subscribe(value => {\n      this.showAdditionalFields = value === 'BAC+5';\n      if (this.showAdditionalFields) {\n        this.addYearDocuments();\n      } else {\n        this.clearYearDocuments();\n      }\n    });\n  }\n  get yearDocuments() {\n    return this.admissionForm.get('yearDocuments');\n  }\n  addYearDocuments() {\n    const years = ['Année 1', 'Année 2', 'Année 3', 'Année 4', 'Année 5'];\n    years.forEach(year => {\n      const yearGroup = this.fb.group({\n        year: [year],\n        documents: this.fb.array([])\n      });\n      this.yearDocuments.push(yearGroup);\n    });\n  }\n  clearYearDocuments() {\n    while (this.yearDocuments.length) {\n      this.yearDocuments.removeAt(0);\n    }\n  }\n  addDocument(yearGroup) {\n    const documentsArray = yearGroup.get('documents');\n    documentsArray.push(this.fb.group({\n      description: ['', Validators.required],\n      file: [null, Validators.required]\n    }));\n  }\n  removeDocument(yearGroup, index) {\n    const documentsArray = yearGroup.get('documents');\n    documentsArray.removeAt(index);\n  }\n  onFileChange(event, documentGroup) {\n    const file = event.target.files[0];\n    documentGroup.patchValue({\n      file: file\n    });\n  }\n  onSubmit() {\n    if (this.admissionForm.valid && this.user) {\n      const admissionData = {\n        uid: this.user.uid,\n        degreeLevel: this.admissionForm.get('degreeLevel')?.value,\n        baccalaureat: this.admissionForm.get('baccalaureat')?.value,\n        yearDocuments: this.yearDocuments.value.reduce((acc, cur) => {\n          acc[cur.year] = cur.documents;\n          return acc;\n        }, {})\n      };\n      this.admissionService.submitAdmission(admissionData).subscribe(() => {\n        this.snackBar.open('Admission submitted successfully', 'OK', {\n          duration: 3000\n        });\n        this.admissionForm.reset();\n      });\n    }\n  }\n};\nAdmissionComponent = __decorate([Component({\n  selector: 'app-admission',\n  templateUrl: './admission.component.html',\n  styleUrl: './admission.component.scss'\n}), __metadata(\"design:paramtypes\", [FormBuilder, AdmissionService, AuthenticationService, MatSnackBar])], AdmissionComponent);\nexport { AdmissionComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}