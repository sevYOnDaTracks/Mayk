{"ast":null,"code":"import { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { AngularFireStorage } from '@angular/fire/compat/storage';\nimport { from } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nimport * as i2 from \"@angular/fire/compat/storage\";\nexport let AdmissionService = /*#__PURE__*/(() => {\n  class AdmissionService {\n    constructor(firestore, storage) {\n      this.firestore = firestore;\n      this.storage = storage;\n    }\n    submitAdmission(admission) {\n      const admissionRef = this.firestore.collection('admissions').doc(admission.uid);\n      const uploadTasks = [];\n      if (admission.baccalaureat) {\n        const path = `${admission.uid}/baccalaureat/${admission.baccalaureat.name}`;\n        const uploadTask = this.storage.upload(path, admission.baccalaureat).snapshotChanges().pipe(switchMap(() => this.storage.ref(path).getDownloadURL()));\n        uploadTasks.push(uploadTask);\n      }\n      Object.keys(admission.yearDocuments).forEach(year => {\n        admission.yearDocuments[year].forEach(doc => {\n          if (doc.file) {\n            const path = `${admission.uid}/${year}/${doc.file.name}`;\n            const uploadTask = this.storage.upload(path, doc.file).snapshotChanges().pipe(switchMap(() => this.storage.ref(path).getDownloadURL()));\n            uploadTasks.push(uploadTask);\n          }\n        });\n      });\n      return from(Promise.all(uploadTasks).then(downloadURLs => {\n        const docData = {\n          ...admission,\n          baccalaureat: '',\n          yearDocuments: {}\n        };\n        downloadURLs.forEach((url, index) => {\n          if (index === 0 && admission.baccalaureat) {\n            docData.baccalaureat = url;\n          } else {\n            const year = Object.keys(admission.yearDocuments)[Math.floor((index - 1) / Object.keys(admission.yearDocuments).length)];\n            const docIndex = (index - 1) % admission.yearDocuments[year].length;\n            if (!docData.yearDocuments[year]) {\n              docData.yearDocuments[year] = [];\n            }\n            docData.yearDocuments[year][docIndex] = {\n              ...admission.yearDocuments[year][docIndex],\n              file: url\n            };\n          }\n        });\n        return admissionRef.set(docData);\n      }));\n    }\n    static #_ = this.ɵfac = function AdmissionService_Factory(t) {\n      return new (t || AdmissionService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AngularFireStorage));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AdmissionService,\n      factory: AdmissionService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AdmissionService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}