{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport let ScrollToDirective = /*#__PURE__*/(() => {\n  class ScrollToDirective {\n    constructor(elmID, el) {\n      this.elmID = elmID;\n      this.el = el;\n    }\n    ngOnInit() {}\n    currentYPosition() {\n      // Firefox, Chrome, Opera, Safari\n      if (self.pageYOffset) {\n        return self.pageYOffset;\n      }\n      // Internet Explorer 6 - standards mode\n      if (document.documentElement && document.documentElement.scrollTop) {\n        return document.documentElement.scrollTop;\n      }\n      // Internet Explorer 6, 7 and 8\n      if (document.body.scrollTop) {\n        return document.body.scrollTop;\n      }\n      return 0;\n    }\n    elmYPosition(eID) {\n      let elm = document.getElementById(eID);\n      let y = elm.offsetTop;\n      let node = elm;\n      while (node.offsetParent && node.offsetParent != document.body) {\n        node = node.offsetParent;\n        y += node.offsetTop;\n      }\n      return y;\n    }\n    smoothScroll(e) {\n      // console.log(e);\n      e.preventDefault();\n      if (!this.elmID) {\n        return;\n      }\n      let startY = this.currentYPosition();\n      let stopY = this.elmYPosition(this.elmID);\n      let distance = stopY > startY ? stopY - startY : startY - stopY;\n      if (distance < 100) {\n        scrollTo(0, stopY);\n        return;\n      }\n      let speed = Math.round(distance / 50);\n      if (speed >= 20) {\n        speed = 20;\n      }\n      let step = Math.round(distance / 25);\n      let leapY = stopY > startY ? startY + step : startY - step;\n      let timer = 0;\n      if (stopY > startY) {\n        for (let i = startY; i < stopY; i += step) {\n          setTimeout('window.scrollTo(0, ' + leapY + ')', timer * speed);\n          leapY += step;\n          if (leapY > stopY) {\n            leapY = stopY;\n          }\n          timer++;\n        }\n        return;\n      }\n      for (let i = startY; i > stopY; i -= step) {\n        setTimeout('window.scrollTo(0, ' + leapY + ')', timer * speed);\n        leapY -= step;\n        if (leapY < stopY) {\n          leapY = stopY;\n        }\n        timer++;\n      }\n      return false;\n    }\n    static #_ = this.ɵfac = function ScrollToDirective_Factory(t) {\n      return new (t || ScrollToDirective)(i0.ɵɵinjectAttribute('scrollTo'), i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n    static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: ScrollToDirective,\n      selectors: [[\"\", \"scrollTo\", \"\"]],\n      hostBindings: function ScrollToDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function ScrollToDirective_click_HostBindingHandler($event) {\n            return ctx.smoothScroll($event);\n          });\n        }\n      }\n    });\n  }\n  return ScrollToDirective;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}