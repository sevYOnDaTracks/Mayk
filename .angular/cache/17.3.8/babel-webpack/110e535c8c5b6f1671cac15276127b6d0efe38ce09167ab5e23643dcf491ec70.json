{"ast":null,"code":"import { FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthenticationService } from '../services/authentication.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../services/authentication.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/material/snack-bar\";\nexport let RegisterComponent = /*#__PURE__*/(() => {\n  class RegisterComponent {\n    constructor(fb, authService, router, snackBar) {\n      this.fb = fb;\n      this.authService = authService;\n      this.router = router;\n      this.snackBar = snackBar;\n      this.loading = false;\n      this.registerForm = this.fb.group({\n        firstName: ['', Validators.required],\n        lastName: ['', Validators.required],\n        phone: ['', Validators.required],\n        birthDate: ['', Validators.required],\n        degreeLevel: ['', Validators.required],\n        email: ['', [Validators.required, Validators.email]],\n        password: ['', [Validators.required, Validators.minLength(6)]],\n        confirmPassword: ['', Validators.required]\n      }, {\n        validator: this.passwordMatchValidator\n      });\n    }\n    passwordMatchValidator(form) {\n      return form.controls['password'].value === form.controls['confirmPassword'].value ? null : {\n        mismatch: true\n      };\n    }\n    register() {\n      if (this.registerForm.valid) {\n        this.loading = true;\n        const {\n          email,\n          password,\n          firstName,\n          lastName,\n          phone,\n          birthDate,\n          degreeLevel\n        } = this.registerForm.value;\n        const parsedBirthDate = new Date(birthDate); // Convert string to Date\n        this.authService.registerWithEmail(email, password).then(userCredential => {\n          const userId = userCredential.user?.uid;\n          if (userId) {\n            const newUser = {\n              uid: userId,\n              firstName,\n              lastName,\n              phone,\n              birthDate: parsedBirthDate,\n              degreeLevel,\n              email\n            };\n            return this.authService.saveUserData(newUser);\n          }\n        }).then(() => {\n          this.snackBar.open('Inscription réussie', 'ok');\n          this.router.navigate(['/']);\n        }).catch(error => {\n          this.snackBar.open('Inscription échouée');\n          console.error('Registration failed', error);\n        }).finally(() => {\n          this.loading = false;\n        });\n      } else {\n        this.snackBar.open('Veuillez renseigner tous les champs !');\n      }\n    }\n    static #_ = this.ɵfac = function RegisterComponent_Factory(t) {\n      return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthenticationService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.MatSnackBar));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: RegisterComponent,\n      selectors: [[\"app-register\"]],\n      decls: 2,\n      vars: 0,\n      template: function RegisterComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p\");\n          i0.ɵɵtext(1, \"register works!\");\n          i0.ɵɵelementEnd();\n        }\n      }\n    });\n  }\n  return RegisterComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}