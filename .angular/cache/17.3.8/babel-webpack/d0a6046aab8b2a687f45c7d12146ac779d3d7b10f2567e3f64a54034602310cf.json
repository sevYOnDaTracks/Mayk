{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar _a;\nimport { Component } from '@angular/core';\nimport { AuthenticationService } from '../../../landing/services/authentication.service';\nlet UserInfoComponent = class UserInfoComponent {\n  constructor(auth, fb) {\n    this.auth = auth;\n    this.fb = fb;\n    this.isEditing = false;\n    this.userForm = this.fb.group({\n      firstName: [{\n        value: '',\n        disabled: true\n      }],\n      lastName: [{\n        value: '',\n        disabled: true\n      }],\n      phone: [{\n        value: '',\n        disabled: true\n      }],\n      birthDate: [{\n        value: '',\n        disabled: true\n      }],\n      degreeLevel: [{\n        value: '',\n        disabled: true\n      }],\n      email: [{\n        value: '',\n        disabled: true\n      }]\n    });\n  }\n  ngOnInit() {\n    this.user$ = this.auth.authenticatedUser$;\n    this.user$.subscribe(user => {\n      if (user) {\n        this.userForm.patchValue(user);\n      }\n    });\n  }\n  editUser() {\n    this.isEditing = true;\n    this.userForm.enable();\n    this.userForm.get('email')?.disable(); // Disable email if you don't want it to be edited\n  }\n  saveUser() {\n    if (this.userForm.valid) {\n      const updatedUser = {\n        ...this.userForm.value,\n        uid: this.auth.currentUser.uid\n      };\n      this.auth.saveUserData(updatedUser).then(() => {\n        this.isEditing = false;\n        this.userForm.disable();\n      }).catch(error => {\n        console.error('Error updating user data: ', error);\n      });\n    }\n  }\n  signOut() {\n    this.auth.logout();\n  }\n};\nUserInfoComponent = __decorate([Component({\n  selector: 'app-user-info',\n  templateUrl: './user-info.component.html',\n  styleUrl: './user-info.component.scss'\n}), __metadata(\"design:paramtypes\", [AuthenticationService, typeof (_a = typeof FormBuilder !== \"undefined\" && FormBuilder) === \"function\" ? _a : Object])], UserInfoComponent);\nexport { UserInfoComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}