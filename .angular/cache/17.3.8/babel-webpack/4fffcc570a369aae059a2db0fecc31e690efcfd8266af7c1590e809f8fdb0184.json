{"ast":null,"code":"import { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { AngularFireStorage } from '@angular/fire/compat/storage';\nimport { from } from 'rxjs';\nimport { finalize, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nimport * as i2 from \"@angular/fire/compat/storage\";\nexport let AdmissionService = /*#__PURE__*/(() => {\n  class AdmissionService {\n    constructor(firestore, storage) {\n      this.firestore = firestore;\n      this.storage = storage;\n    }\n    submitAdmission(admissionData, files) {\n      const fileUploadObservables = Object.keys(files).map(key => {\n        const filePath = `admissions/${new Date().getTime()}_${files[key].name}`;\n        const fileRef = this.storage.ref(filePath);\n        const task = this.storage.upload(filePath, files[key]);\n        return task.snapshotChanges().pipe(finalize(() => fileRef.getDownloadURL().toPromise()));\n      });\n      return from(Promise.all(fileUploadObservables)).pipe(switchMap(urls => {\n        const fileUrls = urls.reduce((acc, url, index) => {\n          acc[Object.keys(files)[index]] = url;\n          return acc;\n        }, {});\n        const submissionData = {\n          ...admissionData,\n          fileUrls\n        };\n        return from(this.firestore.collection('admissions').add(submissionData));\n      }));\n    }\n    static #_ = this.ɵfac = function AdmissionService_Factory(t) {\n      return new (t || AdmissionService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AngularFireStorage));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AdmissionService,\n      factory: AdmissionService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AdmissionService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}