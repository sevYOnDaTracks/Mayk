{"ast":null,"code":"import { AngularFireAuth } from '@angular/fire/compat/auth';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport firebase from 'firebase/compat/app';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/auth\";\nimport * as i2 from \"@angular/fire/compat/firestore\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(afAuth, firestore) {\n      this.afAuth = afAuth;\n      this.firestore = firestore;\n      this.user$ = afAuth.authState;\n    }\n    loginWithGoogle() {\n      return this.afAuth.signInWithPopup(new firebase.auth.GoogleAuthProvider());\n    }\n    loginWithEmail(email, password) {\n      return this.afAuth.signInWithEmailAndPassword(email, password);\n    }\n    registerWithEmail(email, password) {\n      return this.afAuth.createUserWithEmailAndPassword(email, password);\n    }\n    saveUserData(user) {\n      return this.firestore.collection('users').doc(user.uid).set({\n        ...user\n      });\n    }\n    logout() {\n      return this.afAuth.signOut();\n    }\n    getUserData(uid) {\n      return this.firestore.collection('users').doc(uid).valueChanges();\n    }\n    get authenticatedUser$() {\n      return this.user$.pipe(switchMap(user => {\n        if (user) {\n          return this.getUserData(user.uid);\n        } else {\n          return of(null);\n        }\n      }));\n    }\n    static #_ = this.ɵfac = function AuthenticationService_Factory(t) {\n      return new (t || AuthenticationService)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.AngularFirestore));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthenticationService,\n      factory: AuthenticationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}